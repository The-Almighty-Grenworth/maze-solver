https://gist.github.com/garystafford/8196920

commands:

proxy_off
proxy_on


instructs:

create .bashrc file in ~ (dirty way to do this run: copy > ~/.bashrc) it will make the file in user folder

add the code to file and enter proxy deets



# configure proxy for git while on corporate network
 
function proxy_on(){
   # assumes $USERDOMAIN, $USERNAME, $USERDNSDOMAIN
   # are existing Windows system-level environment variables
 
   # assumes $PASSWORD, $PROXY_SERVER, $PROXY_PORT
   # are existing Windows current user-level environment variables (your user)
   
   # environment variables are UPPERCASE even in git bash
   export HTTP_PROXY="http://$USERNAME:$PASSWORD@$PROXY_SERVER.$USERDNSDOMAIN:$PROXY_PORT"
   export HTTPS_PROXY=$HTTP_PROXY
   export FTP_PROXY=$HTTP_PROXY
   export SOCKS_PROXY=$HTTP_PROXY
 
   export NO_PROXY="localhost,127.0.0.1,$USERDNSDOMAIN"
   
   # optional for debugging 
   export GIT_CURL_VERBOSE=1
   
   # optional Self Signed SSL certs and
   # internal CA certificate in an corporate environment
   export GIT_SSL_NO_VERIFY=1
 
   env | grep -e _PROXY -e GIT_ | sort
   echo -e "\nProxy-related environment variables set."
}
 
# remove proxy settings when off corporate network
function proxy_off(){
   variables=( \
      "HTTP_PROXY" "HTTPS_PROXY" "FTP_PROXY" "SOCKS_PROXY" \
      "NO_PROXY" "GIT_CURL_VERBOSE" "GIT_SSL_NO_VERIFY" \
   )
 
   for i in "${variables[@]}"
   do
      unset $i
   done
 
   env | grep -e _PROXY -e GIT_ | sort
   echo -e "\nProxy-related environment variables removed."
}
 
# if you are always behind a proxy uncomment below
#proxy_on
 
# increase verbosity of Vagrant output
export VAGRANT_LOG=INFO